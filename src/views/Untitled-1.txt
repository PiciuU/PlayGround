<template>
    <main>
        <div class="game-container">
            <div class="board">
                <div v-for="(n, col) in 3" :key="col">
                    <div v-for="(n, row) in 3" :key="row">
                        <div class="cell" @click="gameManager(col,row)">
                            <span v-if="board[col][row] !== ''">{{ board[col][row] }}</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>
</template>

<script>
class Board {
    constructor() {
        this.board = [
            ['', '', ''],
            ['', '', ''],
            ['', '', ''],
        ];
    }
}
export default {
    name: 'TicTacToe',
    data() {
        return {
            board: new Board(),
            // board: [
            //     ['', '', ''],
            //     ['', '', ''],
            //     ['', '', ''],
            // ],
            player: null,
            computer: null,
            gameEnd: false,
        };
    },
    mounted() {
        this.generatePlayerType();
    },
    methods: {
        generatePlayerType() {
            const types = ['x', 'o'];
            const index = Math.floor(Math.random() * 2);
            this.player = types[index];
            types.splice(index, 1);
            [this.computer] = types;
        },
        gameManager(col, row) {
            if (this.gameEnd) return;
            if (!this.performMove(col, row, this.player)) return;
            if (this.isGameEnd()) {
                this.gameEnd = true;
                return;
            }
            console.log('test');
            // this.setScore();
            // const computerMove = this.minimax(this.boardClone(), this.computer);
            // this.performMove(computerMove.x, computerMove.y, this.computer);
        },
        performMove(x, y, type) {
            if (this.board[x][y] !== '') {
                return false;
            }
            this.board[x][y] = type;
            this.$forceUpdate();
            return true;
        },
        isGameEnd() {
            return this.possibleMoves().length === 0 || this.isWinner(this.player) || this.isWinner(this.computer);
        },
        possibleMoves() {
            const moves = [];
            for (let i = 0; i < 3; i += 1) {
                for (let j = 0; j < 3; j += 1) {
                    if (this.board[i][j] === '') {
                        moves.push({ x: i, y: j });
                    }
                }
            }
            return moves;
        },
        boardClone() {
            const clone = [
                ['', '', ''],
                ['', '', ''],
                ['', '', ''],
            ];
            for (let i = 0; i < 3; i += 1) {
                for (let j = 0; j < 3; j += 1) {
                    clone[i][j] = this.board[i][j];
                }
            }
            console.log(clone);
            return clone;
        },
        isWinner(type) {
            for (let i = 0; i < 3; i += 1) {
                if (this.board[0][i] === type && this.board[1][i] === type && this.board[2][i] === type) {
                    return true;
                }
            }

            for (let i = 0; i < 3; i += 1) {
                if (this.board[i][0] === type && this.board[i][1] === type && this.board[i][2] === type) {
                    return true;
                }
            }

            if (this.board[0][0] === type && this.board[1][1] === type && this.board[2][2] === type) {
                return true;
            }
            if (this.board[2][0] === type && this.board[1][1] === type && this.board[0][2] === type) {
                return true;
            }

            return false;
        },
    },
};
</script>

<style lang="scss" scoped>
    .game-container {
        width: 800px;
        height: 600px;
        position: relative;
        border-radius: 25px;
        background: rgb(29, 35, 41);
        box-shadow: -6px 6px 1px rgba(0, 0, 0, 0.3);
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all .25s ease-in-out;

        &:after {
            content: '';
            width: 100px;
            height: 100px;
            position: absolute;
            top: 20px;
            left: 20px;
            z-index: 1;
            border-top: 3px solid #32892F;
            border-left: 3px solid #32892F;
            border-top-left-radius: 25px;
            transition: all .15s ease-in-out;
        }

        &:before {
            content: '';
            width: 100px;
            height: 100px;
            position: absolute;
            bottom: 20px;
            right: 20px;
            z-index: 1;
            border-bottom: 3px solid #32892F;
            border-right: 3px solid #32892F;
            border-bottom-right-radius: 25px;
            transition: all .15s ease-in-out;
        }

        .board {
            display: flex;

            div:last-child > div > .cell {
                border-right: none;
            }
            div > div:last-child > .cell {
                border-bottom: none;
            }
        }

        .cell {
            width: 100px;
            height: 100px;
            border-right: 5px solid #32892F;
            border-bottom: 5px solid #32892F;
            font-size: 42px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-family: Pixel;
            color: white;
        }
    }

</style>
